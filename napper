#!/bin/sh

indenter() {
	local I=0
	while [ $I -lt $INDENT_LEVEL ]; do
		printf "  "
		I=$((I+1))
	done
	printf "$1\n"
}

check_update() {
	if [ -d $1/${confiserie} ]; then
		if [ "${UPDATE}" = "yes" ]; then
			if [ -f $1/${confiserie}/autoinstalledscripts ]; then 
				cat $1/${confiserie}/autoinstalledscripts |xargs -i rm -rf $1/{}
				rm $1/${confiserie}/autoinstalledscripts
			fi
		else 
                        printf "cowardly refusing to update an existing confiserie without -u option\n"
			exit 1;
		fi
	fi	
	
	if [ -d $1 ]; then
		mkdir -p $1/${confiserie}
	else
		printf "$1 not a directory\n"
		exit 1
	fi
        printf "#auto generated file by $0\n" > $1/${confiserie}/options
}

check_confiser_path() {
	if [ -z "$CONFISERIE_SCRIPTS_DIR" ]; then
	printf 'please export CONFISERIE_SCRIPTS_DIR env variable \n'
	printf '(normaly /usr/share/confiserie) do a find or locate confiserie\n'
	printf 'or fix the file /etc/confiser.conf\n'
	exit 1
fi

}

make_opt_file() {
        if grep -q '^[[:space:]]*##CONFIGURE_OPTS[[:space:]]*' "${1}"; then
                grep '^[[:space:]]*##CONFIGURE_OPTS[[:space:]]*' "${1}"  |
                        sed "s:^[[:space:]]*##CONFIGURE_OPTS[[:space:]]*::;" >> $2/options
        fi
}

copy_and_process() {
        local DIR=$1
        local FILE=$2
        Fname=${FILE##*/}
        test -n "${FILE%${Fname}}" && mkdir -p $DIR/${confiserie}/${FILE%${Fname}}
        cp $CONFISERIE_SCRIPTS_DIR/tests/$FILE $DIR/${confiserie}/${FILE}         &&
        printf "${confiserie}/$FILE\n" >> $1/${confiserie}/autoinstalledscripts       &&
        install_new_script $DIR $DIR/${confiserie}/$FILE

}


install_new_script() {

        local SCRIPT=$2
        local DIR=$1
        scriptToInstall=$(grep -E ".*\\\$\{confiserie\}.*"  ${SCRIPT} |
                          sed "s:.*\${confiserie}/::" |
                          cut -f 1 -d ' ')
        OLDIFS=$IFS
        IFS=$'
'
        indenter $SCRIPT
	make_opt_file "${SCRIPT}" "$DIR/${confiserie}"
        for FILE in ${scriptToInstall}; do
                if printf "${ALL_CONFISERIE_SCRIPT}\n" | grep -q "${FILE}"; then
                        INDENT_LEVEL=$((INDENT_LEVEL+1))
                        ALL_CONFISERIE_SCRIPT=$(printf "${ALL_CONFISERIE_SCRIPT}" | sed "s:${FILE}::")
                        if [ -d $CONFISERIE_SCRIPTS_DIR/tests/$FILE ]; then
                                for dircontent in $(find $CONFISERIE_SCRIPTS_DIR/tests/$FILE -type f -printf "%P\n"); do
                                        copy_and_process $DIR $FILE/${dircontent}
                                done
                        elif [ -f $CONFISERIE_SCRIPTS_DIR/tests/$FILE ]; then
                                copy_and_process $DIR $FILE
                        fi
                        INDENT_LEVEL=$((INDENT_LEVEL-1))

                fi
        done
        IFS=$OLDIFS
}

install_all_scripts() {
	cp -Rp $CONFISERIE_SCRIPTS_DIR/tests/ $1/confiserie.ref
}


install_make_template() {	
	cp -Rp $CONFISERIE_SCRIPTS_DIR/make_templates/ $1
}


parse_sources() {
  local OPTIONAL_HEADER_PAT
  OPTIONAL_HEADER_PAT=$(find $1 -exec grep 'HAVE_[^ ]*_H' {} \; |
                        awk '{gsub("^.*HAVE_",""); 
                              gsub("_","."); 
                              gsub(" .*$","");
                              gsub(" ","",g);
                              printf("%s\n",$0);
                            }' |sort |uniq )
  INCLUDES=$(find $1 -regex '.*\.c\|.*\.CC\|.*\.h\|.*\.hpp' \
                     -exec grep -q '^[:space:]*#include.*<' {} \; | 
             awk '{gsub("#include.*<","");
                   gsub(">.*$","");
                   printf("%s\n",$0);
                 }' |sort |uniq)

  OPTIONAL_INCLUDES=$(printf "$INCLUDES\n" | grep -i "$OPTIONAL_HEADER_PAT")
  REQUIRED_INCLUDES=$(printf "$INCLUDES\n" | grep -vi "$OPTIONAL_HEADER_PAT")
}



display_help() {
	cat <<-EOF
	$0 [-V|--version][-c|--copy-all][-t|--make-templates] /path/to/sources
	[-V|--version]   : display version and exit
	[-c|--copy-all]  : copy all scripts even uneeded one, don't check ./configure
	[-t|--make-templates] : copy some make template that can be used to begin
	    a project like single_app.Makefile single_lib.Makefile....
        [-u|--update] : update an already installed confiserie
	EOF
}

install_requirement() {
	check_confiser_path
	check_update $1 
	if [ -n "$ALL" ]; then 
		install_all_scripts $1
	else
		install_new_script $1 $1/configure
	fi
	if [ -n "$MAKE_TEMPLATE" ]; then
		install_make_template $1
	fi
	cp -R $CONFISERIE_SCRIPTS_DIR/doc $1/${confiserie}
}

process_args() {
	while [ "$#" -gt 0 ]; do
		case $1 in
			"--help"|"-h")
				display_help
				exit 0;;
			"-V"|"--version" )
				printf "$0 0.0.1\n"
				exit 0;;
			"-c"|"--copy-all" )
				ALL="yes"
				shift;;
			"-t"|"--make-templates")
				MAKE_TEMPLATE="yes"
				shift;;
                        "-u"|"--update")
                                UPDATE="yes"
                                shift;;
			"--confiserie" )
				confiserie=$2
				shift
				shift;;
			-* )
				printf "$1 unknown option\n"
                                display_help
				exit 1;;
			*)		
				install_requirement $1
				shift
				;;
		esac
	done
}
#set -x
#~ DIR_TO_CONFIGURE=$(printf "$1\n" | sed "s:/$::")
#~ DIR_TO_CONFIGURE=${DIR_TO_CONFIGURE:="."}
confiserie=${confiserie:=confiserie}
if [ "$#" -eq 0 ]; then
	display_help
	exit 1
fi
if [ -f /etc/confiserie.conf ]; then
	. /etc/confiserie.conf
fi

INDENT_LEVEL=0
ALL_CONFISERIE_SCRIPT=$(find $CONFISERIE_SCRIPTS_DIR/tests -printf "%P\n" )

process_args "$@"

exit 0

